
import os
import re
import yaml

DEFAULT_CONFIG = {
    # Gateway / Auth
    "gateway_base": "https://aia.gateway.dell.com/genai/dev/v1",
    "token_mode": "preissued",  # "preissued" or "aia_auth"
    "aia_access_token": "",
    "client_id": "",
    "host": "",
    "org": "",
    "client_secret": "",
    "scope": "",
    # GitHub
    "github_token": "",
    # TLS / PKI
    "enable_pki_zip_patch": False,
    "pki_zip_url": "",
    "pki_pems": [
        "Dell Technologies Root Certificate Authority 2018.pem",
        "Dell Technologies Issuing CA 101_new.pem",
    ],
    "custom_ca_bundle": "",
    # Model
    "model": "llama-3-3-70b-instruct",  # default single-model fallback / base synthesizer
    "correlation_id": "pr-review-ui",
    # Output
    "output_format": "html",  # "html" or "markdown"
    # Ensemble persistence
    "selected_models": [],  # filled from UI if empty
    "parallel_models": True,  # run selected models in parallel
    # Generated code filtering
    "skip_generated": True,  # turn off to include generated files
    "generated_path_globs": [
        "**/generated/**",
        "**/gen/**",
        "**/autogen/**",
        "**/build/**",
        "**/out/**",
        "**/dist/**",
    ],
    # quick filename regex (Python re, applied to full path)
    "generated_file_regex": r"(?:^|/)(?:.*\bgenerated\b.*|.*_pb2\.py|.*\.g\.cs|.*\.Designer\.cs|.*\.swagger\.ts|.*\.pb\.go|.*\.g\.dart|.*\.g\.ts)$",
    # content markers inside the fileâ€™s diff hunk (first ~120 lines of each file block)
    "generated_header_markers": [
        "Code generated by",
        "Automatically generated",
        "Auto-generated",
        "DO NOT EDIT",
        "@generated",
    ],
}

LAST_CONFIG_POINTER = ".last_config_path"

def config_path_for_correlation(correlation_id: str) -> str:
    safe = re.sub(r"[^a-zA-Z0-9._-]+", "-", correlation_id.strip()) or "pr-review-ui"
    return os.path.join(os.getcwd(), f"config_{safe}.yaml")

def load_last_config_path() -> str | None:
    try:
        with open(LAST_CONFIG_POINTER, "r", encoding="utf-8") as f:
            p = f.read().strip()
            return p if p and os.path.exists(p) else None
    except Exception:
        return None

def save_last_config_path(path: str):
    try:
        with open(LAST_CONFIG_POINTER, "w", encoding="utf-8") as f:
            f.write(path)
    except Exception:
        pass

def load_config(path: str) -> dict:
    if not os.path.exists(path):
        return DEFAULT_CONFIG.copy()
    with open(path, "r", encoding="utf-8") as f:
        data = yaml.safe_load(f) or {}
        cfg = DEFAULT_CONFIG.copy()
        for k, v in data.items():
            if k in cfg:
                cfg[k] = v
        return cfg

def save_config(path: str, cfg: dict):
    with open(path, "w", encoding="utf-8") as f:
        yaml.safe_dump(cfg, f, sort_keys=False)
